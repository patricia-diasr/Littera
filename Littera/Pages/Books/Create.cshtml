@page
@model Littera.Pages.Books.CreateModel
@using System.Text.Json

<style>
    .book-cover {
        width: 100%;
        max-width: 280px;
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-md);
        transition: transform var(--transition-normal), box-shadow var(--transition-normal);
    }

        .book-cover:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: var(--shadow-lg);
        }

    .cover-upload-wrapper {
        position: relative;
        width: fit-content;
        margin: 0 auto;
    }

    .cover-upload-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--radius-md);
        transition: * var(--transition-normal);
        font-weight: 500;
        color: rgba(25, 40, 65, 0.7);
    }

    .cover-upload-wrapper:hover .cover-upload-overlay {
        background-color: rgba(25, 40, 65, 0.7);
        color: var(--bs-light);
    }

    .section-title {
        font-weight: 600;
        font-size: 1.25rem;
        margin-top: 30px;
        border-bottom: 2px solid rgba(25, 40, 65, 0.1);
        padding-bottom: 8px;
        color: var(--header-bg);
    }

    .book-info-label {
        font-weight: 600;
        color: var(--header-bg);
        margin-bottom: 6px;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .book-container {
        padding: 40px;
        background-color: var(--bs-light);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        margin: 30px 0;
    }

    .book-title {
        color: var(--header-bg);
        font-weight: 700;
        font-size: 1.25rem;
    }

    .book-author {
        color: var(--bs-secondary);
        font-weight: 500;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: var(--radius-md);
        font-weight: 500;
        transition: all var(--transition-fast);
        box-shadow: var(--shadow-sm);
    }

        .btn-action:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

    .btn-save {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        color: var(--bs-light);
    }

        .btn-save:hover {
            background-color: var(--bs-primary-hover);
            border-color: var(--bs-primary-hover);
        }

    .btn-cancel {
        background-color: #e63946;
        border-color: #e63946;
        color: var(--bs-light);
    }

        .btn-cancel:hover {
            background-color: #d62938;
            border-color: #d62938;
        }

    .form-control, .form-select {
        border-radius: var(--radius-sm);
        border: 1px solid rgba(25, 40, 65, 0.2);
        padding: 0.6rem 0.75rem;
        transition: all var(--transition-fast);
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--bs-primary);
            box-shadow: 0 0 0 0.15rem rgba(67, 97, 238, 0.25);
        }

    .form-control-lg {
        font-size: 1.3rem;
    }

    textarea.form-control {
        min-height: 120px;
    }

    .form-label {
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .tags-input, .collections-input {
        background-color: rgba(25, 40, 65, 0.03);
    }

    .form-section {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
    }

    .rating-section {
        transition: opacity 0.3s ease, height 0.3s ease;
        overflow: hidden;
    }

        .rating-section.hidden {
            opacity: 0;
            height: 0;
            margin: 0;
            padding: 0;
        }

    .date-section {
        transition: opacity 0.3s ease;
    }

        .date-section.hidden {
            display: none;
        }

    #datesSection.hidden {
        display: none;
    }

    #startDateSection.hidden,
    #endDateSection.hidden {
        display: none;
    }

    .tags-selector-container, .collections-selector-container {
        position: relative;
    }

    .tags-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid rgba(25, 40, 65, 0.2);
        border-radius: var(--radius-sm);
        box-shadow: var(--shadow-md);
        z-index: 1000;
        max-height: 250px;
        overflow-y: auto;
        display: none;
    }

        .tags-dropdown.show {
            display: block;
        }

    .tag-option {
        padding: 0.75rem 1rem;
        cursor: pointer;
        transition: all var(--transition-fast);
        border-bottom: 1px solid rgba(25, 40, 65, 0.05);
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .tag-option:hover {
            background-color: rgba(85, 214, 190, 0.1);
        }

        .tag-option.selected {
            background-color: rgba(85, 214, 190, 0.15);
            color: var(--header-bg);
            font-weight: 500;
        }

        .tag-option:last-child {
            border-bottom: none;
        }

    .selected-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.75rem;
        min-height: 2rem;
        align-items: flex-start;
    }
    
        .selected-tags:empty {
            display: none;
        }

    .selected-tag {
        background-color: var(--bs-primary);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: var(--radius-sm);
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all var(--transition-fast);
        box-shadow: var(--shadow-sm);
    }

        .selected-tag:hover {
            background-color: var(--bs-primary-hover);
            transform: translateY(-1px);
        }

        .selected-tag .remove-tag {
            cursor: pointer;
            font-weight: bold;
            opacity: 0.8;
            transition: opacity var(--transition-fast);
        }

            .selected-tag .remove-tag:hover {
                opacity: 1;
            }

    .tags-input-field, .collections-input-field {
        cursor: pointer;
    }

    .dropdown-search {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid rgba(25, 40, 65, 0.1);
        position: sticky;
        top: 0;
        background: white;
        z-index: 1;
    }

        .dropdown-search input {
            border: none;
            outline: none;
            width: 100%;
            padding: 0.5rem;
            border-radius: var(--radius-sm);
            background-color: rgba(25, 40, 65, 0.05);
            font-size: 0.875rem;
        }

            .dropdown-search input:focus {
                background-color: rgba(25, 40, 65, 0.08);
            }

    .no-results {
        padding: 1rem;
        text-align: center;
        color: var(--bs-secondary);
        font-style: italic;
    }

    @@media (max-width: 768px) {
        .book-container {
            padding: 25px;
        }
    }

</style>

<form method="post" enctype="multipart/form-data" class="container book-container">
    <div class="row">
        <div class="col-md-4 text-center mb-4 mb-md-0">
            <div class="cover-upload-wrapper">
                <input type="file" id="bookCoverFile" asp-for="BookCoverFile" accept="image/*" class="d-none">
                <label for="bookCoverFile" style="cursor: pointer; display: block;">
                    <img src="/uploads/books/default.png" id="bookCoverPreview" class="book-cover" alt="Capa do Livro">
                    <div class="cover-upload-overlay">
                        <div>
                            <i class="bi bi-camera-fill fs-2 mb-2"></i>
                            <div>Selecionar imagem</div>
                        </div>
                    </div>
                </label>
            </div>
        </div>

        <div class="col-md-8">
            <div class="form-section">
                <div class="mb-3">
                    <div class="book-info-label">Título</div>
                    <input type="text" asp-for="Book.Title" class="form-control form-control-lg" placeholder="Título do livro" value="" />
                    <span asp-validation-for="Book.Title" class="text-danger"></span>
                </div>

                <div class="mb-4">
                    <div class="book-info-label">Autor(a)</div>
                    <input type="text" asp-for="Author.Name" class="form-control" placeholder="Autor(a)" value="" />
                    <span asp-validation-for="Author.Name" class="text-danger"></span>
                </div>
            </div>

            <div class="form-section">
                <div class="mb-4">
                    <div class="book-info-label">Tags</div>
                    <div class="input-group tags-selector-container">
                        <span class="input-group-text bg-transparent">
                            <i class="bi bi-tags"></i>
                        </span>
                        <input type="text"
                               class="form-control tags-input tags-input-field"
                               placeholder="Clique para selecionar tags..."
                               readonly />
                        <div class="tags-dropdown" id="tagsDropdown">
                            <div class="dropdown-search">
                                <input type="text"
                                       placeholder="Buscar tags..."
                                       id="tagSearch">
                            </div>
                            <div id="tagOptions">
                            </div>
                        </div>
                    </div>
                    <div class="selected-tags" id="selectedTags">
                    </div>
                    <input type="hidden" name="SelectedTagIds" id="tagsHiddenInput">
                </div>

                <div class="mb-4">
                    <div class="book-info-label">Coleções</div>
                    <div class="input-group collections-selector-container">
                        <span class="input-group-text bg-transparent">
                            <i class="bi bi-tags"></i>
                        </span>
                        <input type="text"
                               class="form-control tags-input collections-input-field"
                               placeholder="Clique para selecionar coleções..."
                               readonly />
                        <div class="tags-dropdown" id="collectionsDropdown">
                            <div class="dropdown-search">
                                <input type="text"
                                       placeholder="Buscar coleções..."
                                       id="collectionSearch">
                            </div>
                            <div id="collectionOptions">
                            </div>
                        </div>
                    </div>
                    <div class="selected-tags" id="selectedCollections">
                    </div>
                    <input type="hidden" name="SelectedCollectionsIds" id="collectionsHiddenInput">
                </div>
            </div>

            <div class="form-section">
                <div class="row mb-4">
                    <div class="col-sm-6 mb-3 mb-sm-0">
                        <div class="book-info-label">Status</div>
                        <select asp-for="Book.Status" id="bookStatus" class="form-select">
                            <option>Quero Ler</option>
                            <option>Lendo</option>
                            <option>Lido</option>
                        </select>
                    </div>
                    <div class="col-sm-6">
                        <div class="book-info-label">Quantidade de Páginas</div>
                        <div class="input-group">
                            <span class="input-group-text bg-transparent">
                                <i class="bi bi-file-text"></i>
                            </span>
                            <input type="number" asp-for="Book.PageCount" class="form-control" value="" />
                        </div>
                    </div>
                </div>

                <div class="row mb-4" id="datesSection">
                    <div class="col-sm-6 mb-3 mb-sm-0" id="startDateSection">
                        <div class="book-info-label">Data de Início</div>
                        <div class="input-group">
                            <span class="input-group-text bg-transparent">
                                <i class="bi bi-calendar-event"></i>
                            </span>
                            <input type="date" asp-for="Book.StartDate" class="form-control" value="" />
                        </div>
                    </div>
                    <div class="col-sm-6" id="endDateSection">
                        <div class="book-info-label">Data de Término</div>
                        <div class="input-group">
                            <span class="input-group-text bg-transparent">
                                <i class="bi bi-calendar-check"></i>
                            </span>
                            <input type="date" asp-for="Book.EndDate" class="form-control" value="" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="section-title">Resumo</div>
            <div class="form-group">
                <textarea asp-for="Book.Summary" class="form-control mb-4" rows="5" placeholder="Escreva um breve resumo do livro..."></textarea>
            </div>

            <div class="rating-section hidden" id="ratingSection">
                <div class="section-title">Avaliação</div>
                <div class="form-group mb-3">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent">
                            <i class="bi bi-star-fill text-warning"></i>
                        </span>
                        <select asp-for="Book.Rating" class="form-select">
                            <option value="5">5 estrelas</option>
                            <option value="4">4 estrelas</option>
                            <option value="3">3 estrelas</option>
                            <option value="2">2 estrelas</option>
                            <option value="1">1 estrela</option>
                        </select>
                    </div>
                </div>

                <div class="form-group mb-5">
                    <textarea asp-for="Book.Comment" class="form-control" rows="3" placeholder="Escreva sua avaliação..."></textarea>
                </div>
            </div>

            <div class="button-container mt-4">
                <button type="submit" class="btn btn-action btn-save">
                    <i class="bi bi-save-fill me-2"></i> Salvar
                </button>
                <a href="#" class="btn btn-action btn-cancel">
                    <i class="bi bi-x-circle-fill me-2"></i> Cancelar
                </a>
            </div>
        </div>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById("bookCoverFile").addEventListener("change", function () {
            const file = this.files[0];

            if (file) {
                const preview = document.getElementById("bookCoverPreview");
                preview.src = URL.createObjectURL(file);
            }
        });

        const bookStatus = document.getElementById("bookStatus");
        const ratingSection = document.getElementById("ratingSection");
        const datesSection = document.getElementById("datesSection");
        const startDateSection = document.getElementById("startDateSection");
        const endDateSection = document.getElementById("endDateSection");

        function toggleSections() {
            const status = bookStatus.value;

            if (status === "Lido") {
                ratingSection.classList.remove("hidden");
            } else {
                ratingSection.classList.add("hidden");

                const ratingSelect = ratingSection.querySelector("select");
                const commentTextarea = ratingSection.querySelector("textarea");

                if (ratingSelect) ratingSelect.selectedIndex = 0;
                if (commentTextarea) commentTextarea.value = "";
            }

            if (status === "Quero Ler") {
                datesSection.classList.add("hidden");
                clearDateFields();
            } else if (status === "Lendo" ) {
                datesSection.classList.remove("hidden");
                startDateSection.classList.remove("hidden");
                endDateSection.classList.add("hidden");
                clearEndDate();
            } else if (status === "Lido") {
                datesSection.classList.remove("hidden");
                startDateSection.classList.remove("hidden");
                endDateSection.classList.remove("hidden");
            }
        }

        function clearDateFields() {
            const startDateInput = startDateSection.querySelector("input[type='date']");
            const endDateInput = endDateSection.querySelector("input[type='date']");

            if (startDateInput) startDateInput.value = "";
            if (endDateInput) endDateInput.value = "";
        }

        function clearEndDate() {
            const endDateInput = endDateSection.querySelector("input[type='date']");
            if (endDateInput) endDateInput.value = "";
        }

        toggleSections();
        bookStatus.addEventListener("change", toggleSections);

        renderTagOptions();
        updateTagDisplay();

        renderCollectionOptions();
        updateCollectionDisplay();
    });

    const availableTags = @Html.Raw(JsonSerializer.Serialize(Model.Tags.Select(t => new { id = t.Id, name = t.Name, color = t.Color })));
    const availableCollections = @Html.Raw(JsonSerializer.Serialize(Model.Collections.Select(c => new { id = c.Id, name = c.Name, color = c.Color })));

    let selectedTags = [];
    let filteredTags = [...availableTags];

    let selectedCollections = [];
    let filteredCollections = [...availableCollections];

    const tagsInput = document.querySelector('.tags-input-field');
    const tagsDropdown = document.getElementById('tagsDropdown');
    const tagOptions = document.getElementById('tagOptions');
    const selectedTagsContainer = document.getElementById('selectedTags');
    const tagSearch = document.getElementById('tagSearch');
    const hiddenTagInput = document.getElementById('tagsHiddenInput');

    const collectionsInput = document.querySelector('.collections-input-field');
    const collectionsDropdown = document.getElementById('collectionsDropdown');
    const collectionOptions = document.getElementById('collectionOptions');
    const selectedCollectionsContainer = document.getElementById('selectedCollections');
    const collectionSearch = document.getElementById('collectionSearch');
    const hiddenCollectionInput = document.getElementById('collectionsHiddenInput');

    tagsInput.addEventListener('click', function(e) {
        e.stopPropagation();
        toggleTagDropdown();
    });

    collectionsInput.addEventListener('click', function(e) {
        e.stopPropagation();
        toggleCollectionDropdown();
    });

    tagSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        filteredTags = availableTags.filter(tag =>
            tag.name.toLowerCase().includes(searchTerm)
        );
        renderTagOptions();
    });

    collectionSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        filteredCollections = availableCollections.filter(tag =>
            tag.name.toLowerCase().includes(searchTerm)
        );
        renderCollectionOptions();
    });

    document.addEventListener('click', function(e) {
        if (!e.target.closest('.tags-selector-container')) {
            closeTagDropdown();
        }

        if (!e.target.closest('.collections-selector-container')) {
            closeCollectionDropdown();
        }
    });

    tagsDropdown.addEventListener('click', function(e) {
        e.stopPropagation();
    });

    collectionsDropdown.addEventListener('click', function(e) {
        e.stopPropagation();
    });

    function toggleTagDropdown() {
        tagsDropdown.classList.toggle('show');
        if (tagsDropdown.classList.contains('show')) {
            tagSearch.focus();
        }
    }

    function toggleCollectionDropdown() {
        collectionsDropdown.classList.toggle('show');
        if (collectionsDropdown.classList.contains('show')) {
            collectionSearch.focus();
        }
    }

    function closeTagDropdown() {
        tagsDropdown.classList.remove('show');
        tagSearch.value = '';
        filteredTags = [...availableTags];
        renderTagOptions();
    }


    function closeCollectionDropdown() {
        collectionsDropdown.classList.remove('show');
        collectionSearch.value = '';
        filteredCollections = [...availableCollections];
        renderCollectionOptions();
    }

    function renderTagOptions() {
        tagOptions.innerHTML = '';

        if (filteredTags.length === 0) {
            tagOptions.innerHTML = '<div class="no-results">Nenhuma tag encontrada</div>';
            return;
        }

        filteredTags.forEach(tag => {
            const isSelected = selectedTags.some(t => t.id === tag.id);

            const option = document.createElement('div');
            option.className = 'tag-option';
            option.innerHTML = `
                <span>${tag.name}</span>
                ${isSelected ? '<i class="bi bi-check-circle-fill" style="color: var(--bs-primary);"></i>' : ''}
            `;

            if (isSelected) {
                option.classList.add('selected');
            }

            option.addEventListener('click', function () {
                toggleTag(tag);
            });

            tagOptions.appendChild(option);
        });
    }

    function renderCollectionOptions() {
        collectionOptions.innerHTML = '';

        if (filteredCollections.length === 0) {
            collectionOptions.innerHTML = '<div class="no-results">Nenhuma tag encontrada</div>';
            return;
        }

        filteredCollections.forEach(collection => {
            const isSelected = selectedCollections.some(c => c.id === collection.id);

            const option = document.createElement('div');
            option.className = 'tag-option';
            option.innerHTML = `
                <span>${collection.name}</span>
                ${isSelected ? '<i class="bi bi-check-circle-fill" style="color: var(--bs-primary);"></i>' : ''}
            `;

            if (isSelected) {
                option.classList.add('selected');
            }

            option.addEventListener('click', function () {
                toggleCollection(collection);
            });

            collectionOptions.appendChild(option);
        });
    }

    function toggleTag(tag) {
        const index = selectedTags.findIndex(t => t.id === tag.id);

        if (index > -1) {
            selectedTags.splice(index, 1);
        } else {
            selectedTags.push(tag);
        }

        updateTagDisplay();
        renderTagOptions();
    }

    function toggleCollection(collection) {
        const index = selectedCollections.findIndex(c => c.id === collection.id);

        if (index > -1) {
            selectedCollections.splice(index, 1);
        } else {
            selectedCollections.push(collection);
        }

        updateCollectionDisplay();
        renderCollectionOptions();
    }

    function removeTag(tagId) {
        const index = selectedTags.findIndex(t => t.id === tagId);
        if (index > -1) {
            selectedTags.splice(index, 1);
            updateTagDisplay();
            renderTagOptions();
        }
    }

    function removeCollection(collectionId) {
        const index = selectedCollections.findIndex(c => c.id === collectionId);
        if (index > -1) {
            selectedCollections.splice(index, 1);
            updateCollectionDisplay();
            renderCollectionOptions();
        }
    }

    function updateTagDisplay() {
        if (selectedTags.length === 0) {
            tagsInput.placeholder = 'Clique para selecionar tags...';
        } else {
            tagsInput.placeholder = `${selectedTags.length} tag${selectedTags.length > 1 ? 's' : ''} selecionada${selectedTags.length > 1 ? 's' : ''}`;
        }

        selectedTagsContainer.innerHTML = '';
        selectedTags.forEach(tag => {
            const tagElement = document.createElement('div');
            tagElement.className = 'selected-tag';
            tagElement.style.background = tag.color;
            tagElement.innerHTML = `
                <span>${tag.name}</span>
                <span class="remove-tag" onclick="removeTag(${tag.id})">&times;</span>
            `;
            selectedTagsContainer.appendChild(tagElement);
        });

        hiddenTagInput.value = selectedTags.map(t => t.id).join(',');
    }

    function updateCollectionDisplay() {
        if (selectedCollections.length === 0) {
            collectionsInput.placeholder = 'Clique para selecionar tags...';
        } else {
            collectionsInput.placeholder = `${selectedCollections.length} tag${selectedCollections.length > 1 ? 's' : ''} selecionada${selectedCollections.length > 1 ? 's' : ''}`;
        }

        selectedCollectionsContainer.innerHTML = '';
        selectedCollections.forEach(collection => {
            const collectionElement = document.createElement('div');
            collectionElement.className = 'selected-tag';
            collectionElement.style.background = collection.color;
            collectionElement.innerHTML = `
                <span>${collection.name}</span>
                <span class="remove-tag" onclick="removeCollection(${collection.id})">&times;</span>
            `;
            selectedCollectionsContainer.appendChild(collectionElement);
        });

        hiddenCollectionInput.value = selectedCollections.map(c => c.id).join(',');
    }
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}