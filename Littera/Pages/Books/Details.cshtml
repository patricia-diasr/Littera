@page
@model Littera.Pages.Books.DetailsModel
@{
}

<style>
    .book-cover {
        width: 100%;
        max-width: 280px;
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-lg);
        transition: transform var(--transition-normal);
    }

        .book-cover:hover {
            transform: scale(1.03);
        }

    .star-rating i {
        color: var(--bs-warning);
        font-size: 1.3rem;
        margin-right: 3px;
    }

    .section-title {
        font-weight: 600;
        font-size: 1.25rem;
        margin-top: 30px;
        margin-bottom: 15px;
        border-bottom: 2px solid rgba(25, 40, 65, 0.1);
        padding-bottom: 8px;
        color: var(--header-bg);
    }

    .book-info-label {
        font-weight: 600;
        color: var(--header-bg);
        margin-bottom: 6px;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .book-container {
        padding: 40px;
        background-color: var(--bs-light);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        margin: 30px 0;
    }

    .badge-custom {
        background-color: var(--bs-primary);
        color: var(--bs-light);
        padding: 6px 12px;
        font-size: 0.85rem;
        border-radius: 16px;
        font-weight: 500;
        transition: all var(--transition-fast);
    }

    .badge-collection {
        background-color: var(--header-bg);
        color: var(--bs-light);
        padding: 6px 12px;
        font-size: 0.85rem;
        border-radius: 16px;
        font-weight: 500;
    }

    .book-title {
        color: var(--header-bg);
        font-weight: 700;
        font-size: 2.2rem;
        margin-bottom: 0.5rem;
    }

    .book-author {
        color: var(--bs-secondary);
        font-weight: 500;
        font-size: 1.2rem;
        margin-bottom: 1.5rem;
    }

    .book-info-value {
        color: #444;
        font-size: 1rem;
    }

    .book-summary {
        line-height: 1.7;
        color: #444;
        font-size: 1rem;
    }

    .button-container {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: var(--radius-md);
        font-weight: 500;
        transition: all var(--transition-fast);
        box-shadow: var(--shadow-sm);
    }

        .btn-action:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

    .btn-edit {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        color: var(--bs-light);
    }

        .btn-edit:hover {
            background-color: var(--bs-primary-hover);
            border-color: var(--bs-primary-hover);
        }

    .btn-delete {
        background-color: #e63946;
        border-color: #e63946;
        color: var(--bs-light);
    }

        .btn-delete:hover {
            background-color: #d62938;
            border-color: #d62938;
        }

    .review-container {
        background-color: rgba(25, 40, 65, 0.03);
        border-radius: var(--radius-md);
        padding: 20px;
        margin-top: 15px;
        margin-bottom: 25px;
    }

    .book-metadata {
        display: inline-flex;
        align-items: center;
        background-color: rgba(25, 40, 65, 0.05);
        border-radius: 30px;
        padding: 6px 12px;
        margin-right: 10px;
        margin-bottom: 10px;
    }

        .book-metadata i {
            margin-right: 6px;
            color: var(--header-bg);
        }

    .title-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        flex-direction: row;
        gap: 0.5rem;
    }

    .badge-status {
        background-color: var(--bs-secondary);
        color: var(--bs-light);
        padding: 5px 12px;
        font-size: 0.85rem;
        border-radius: 16px;
        font-weight: 500;
        display: flex;
        align-items: center;
    }

        .badge-status i {
            margin-right: 5px;
        }

    .status-reading {
        background-color: var(--bs-warning);
    }

    .status-read {
        background-color: var(--bs-primary);
    }

    @@media (max-width: 1200px) {
        .title-container {
            flex-direction: column-reverse;
            align-items: flex-start;
        }
    }
</style>

<div class="container book-container">
    <div class="row">
        <div class="col-md-4 text-center mb-4 mb-md-0">
            <img src="@(!string.IsNullOrEmpty(Model.Book.Cover) ? Model.Book.Cover : "/uploads/books/default.png")"
                 class="book-cover"
                 alt="Model.Book.Title"
                 onerror="this.onerror=null;this.src='/uploads/books/default.png';">
        </div>

        <div class="col-md-8">
            <div class="title-container">
                <h2 class="book-title">@Model.Book.Title</h2>
                @{
                    string statusClass = Model.Book.Status switch
                    {
                        "Lendo" => "status-reading",
                        "Lido" => "status-read",
                        _ => ""
                    };
                }

                <span class="badge-status @statusClass">
                    <i class="bi bi-check-circle-fill"></i> @Model.Book.Status
                </span>
            </div>
            <h5 class="book-author">por @Model.Author.Name</h5>

            <div class="d-flex flex-wrap mb-4">
                @if (Model.Book.StartDate != null) {
                    <div class="book-metadata">
                        <i class="bi bi-calendar-event"></i>
                        <span>@Model.Book.StartDate?.ToString("dd/MM/yyyy") - @Model.Book.EndDate?.ToString("dd/MM/yyyy")</span>
                    </div>
                }
                <div class="book-metadata">
                    <i class="bi bi-file-text"></i>
                    <span>@Model.Book.PageCount páginas</span>
                </div>
            </div>

            @if (Model.Tags != null && Model.Tags.Any())
            {
                <div class="mb-4">
                    <div class="book-info-label">Tags</div>

                    @foreach (var tag in Model.Tags)
                    {
                    <span class="badge badge-custom me-2 mb-2" style="background: @tag.Color">
                        <i class="bi bi-tag-fill me-1"></i>@tag.Name
                    </span>
                    }
                </div>
            }

            @if (Model.Collections != null && Model.Collections.Any())
            {
                <div class="mb-4">
                    <div class="book-info-label">Coleções</div>
                    @foreach (var collection in Model.Collections)
                    {
                    <span class="badge badge-collection me-2 mb-2" style="background: @collection.Color">
                        <i class="bi bi-collection-fill me-1"></i>@collection.Name
                    </span>
                    }
                </div>
            }

            <div class="section-title">Resumo</div>
            @if (!string.IsNullOrWhiteSpace(Model.Book.Summary))
            {
                foreach (var paragraph in Model.Book.Summary.Split(Environment.NewLine))
                {
                    if (!string.IsNullOrWhiteSpace(paragraph))
                    {
                        <p class="book-summary">@paragraph</p>
                    }
                }
            }
            else {
                <p class="book-summary">Sem resumo</p>
            }

            <div class="section-title">Minha Avaliação</div>
            <div class="review-container">
                @if (Model.Book.Rating != null)
                {
                    <div class="star-rating mb-2">

                    @for (int i = 0; i < Model.Book.Rating; i++)
                    {
                        <i class="bi bi-star-fill"></i>
                    }

                    </div>

                }
                <p class="book-summary fst-italic mb-0">
                    @(!string.IsNullOrWhiteSpace(Model.Book.Comment) ? @Model.Book.Comment : "...")
                </p>
            </div>

            <div class="button-container mt-5">

                <a class="btn btn-action btn-edit" asp-page="/Books/Edit" asp-route-id="@Model.Book.Id">
                    <i class="bi bi-pencil-fill me-2"></i>Editar
                </a>
                <a class="btn btn-action btn-delete" data-bs-toggle="modal" data-bs-target="#deleteModal">
                    <i class="bi bi-trash-fill me-2"></i>Apagar
                </a>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Excluir Livro</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <form method="post" asp-page-handler="DeleteBook">
                <input type="hidden" name="bookId" value="@Model.Book.Id" />

                <div class="modal-body">
                    Tem certeza que deseja excluir este livro? Esta ação não poderá ser desfeita.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-action btn-save">Excluir</button>
                </div>
            </form>
        </div>
    </div>
</div>
